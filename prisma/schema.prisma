generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-arm64-openssl-1.1.x"]
  engineType    = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(cuid())
  email              String           @unique
  password           String
  firstName          String
  lastName           String
  role               UserRole
  isActive           Boolean          @default(true)
  vendorId           String?
  teamId             String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  callbacks          Callback[]
  contactAttempts    ContactAttempt[]
  fileUploads        FileUpload[]
  leadsAsAdvocate    Lead[]           @relation("AdvocateLead")
  leadsAsCollections Lead[]           @relation("CollectionsLead")
  team               Team?            @relation(fields: [teamId], references: [id])
  vendor             Vendor?          @relation(fields: [vendorId], references: [id])

  @@index([email])
  @@index([role])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  type        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     User[]
}

model Vendor {
  id             String   @id @default(cuid())
  name           String
  code           String   @unique
  staticCode     String   @unique
  parentVendorId String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  leads          Lead[]
  users          User[]
  parentVendor   Vendor?  @relation("VendorHierarchy", fields: [parentVendorId], references: [id])
  subVendors     Vendor[] @relation("VendorHierarchy")

  @@index([code])
  @@index([staticCode])
}

model Lead {
  id                     String                  @id @default(cuid())
  mbi                    String                  @unique
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  phone                  String
  street                 String
  city                   String
  state                  String
  zipCode                String
  vendorId               String
  subVendorId            String?
  vendorCode             String
  status                 LeadStatus
  testType               TestType?
  isDuplicate            Boolean                 @default(false)
  hasActiveAlerts        Boolean                 @default(false)
  advocateId             String?
  advocateDisposition    AdvocateDisposition?
  advocateNotes          String?
  advocateReviewedAt     DateTime?
  collectionsAgentId     String?
  collectionsDisposition CollectionsDisposition?
  contactAttempts        Int                     @default(0)
  lastContactAttempt     DateTime?
  nextCallbackDate       DateTime?
  collectionsNotes       String?
  doctorApprovalStatus   DoctorApprovalStatus?
  doctorApprovalDate     DateTime?
  consultDate            DateTime?
  kitShippedDate         DateTime?
  trackingNumber         String?
  kitReturnedDate        DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  callbacks              Callback[]
  complianceChecklist    ComplianceChecklist?
  contactAttemptRecords  ContactAttempt[]
  advocate               User?                   @relation("AdvocateLead", fields: [advocateId], references: [id])
  collectionsAgent       User?                   @relation("CollectionsLead", fields: [collectionsAgentId], references: [id])
  vendor                 Vendor                  @relation(fields: [vendorId], references: [id])
  alerts                 LeadAlert[]

  @@index([mbi])
  @@index([status])
  @@index([vendorId])
  @@index([advocateId])
  @@index([collectionsAgentId])
  @@index([isDuplicate])
  @@index([hasActiveAlerts])
}

model ComplianceChecklist {
  id                    String    @id @default(cuid())
  leadId                String    @unique
  verifyDobAddress      Boolean
  patientConsent        Boolean
  notInCareFacility     Boolean
  makesMedicalDecisions Boolean
  understandsBilling    Boolean
  noCognitiveImpairment Boolean
  agentNotMedicare      Boolean
  noIncentives          Boolean
  futureContactConsent  Boolean
  completedAt           DateTime?
  completedBy           String?
  createdAt             DateTime  @default(now())
  lead                  Lead      @relation(fields: [leadId], references: [id])
}

model ContactAttempt {
  id          String   @id @default(cuid())
  leadId      String
  agentId     String
  attemptDate DateTime @default(now())
  outcome     String
  notes       String?
  agent       User     @relation(fields: [agentId], references: [id])
  lead        Lead     @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([agentId])
}

model Callback {
  id            String    @id @default(cuid())
  leadId        String
  agentId       String
  scheduledDate DateTime
  completed     Boolean   @default(false)
  completedDate DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  agent         User      @relation(fields: [agentId], references: [id])
  lead          Lead      @relation(fields: [leadId], references: [id])

  @@index([scheduledDate])
  @@index([agentId])
}

model FileUpload {
  id               String         @id @default(cuid())
  type             FileUploadType
  fileName         String
  fileUrl          String
  uploadedById     String
  uploadedAt       DateTime       @default(now())
  processedAt      DateTime?
  recordsProcessed Int            @default(0)
  errors           Json?
  uploadedBy       User           @relation(fields: [uploadedById], references: [id])

  @@index([type])
  @@index([uploadedAt])
}

model DailyMetrics {
  id             String   @id @default(cuid())
  date           DateTime @unique
  totalLeads     Int
  qualifiedLeads Int
  approvedLeads  Int
  shippedKits    Int
  completedKits  Int
  immuneLeads    Int
  neuroLeads     Int
  conversionData Json
  createdAt      DateTime @default(now())

  @@index([date])
}

model LeadAlert {
  id             String        @id @default(cuid())
  leadId         String
  type           AlertType
  severity       AlertSeverity
  message        String
  isAcknowledged Boolean       @default(false)
  acknowledgedBy String?
  acknowledgedAt DateTime?
  relatedLeadId  String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lead           Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([type])
  @@index([severity])
  @@index([isAcknowledged])
  @@index([createdAt])
  @@index([relatedLeadId])
}

enum UserRole {
  ADMIN
  VENDOR
  ADVOCATE
  COLLECTIONS
}

enum TestType {
  IMMUNE
  NEURO
}

enum LeadStatus {
  SUBMITTED
  ADVOCATE_REVIEW
  QUALIFIED
  SENT_TO_CONSULT
  APPROVED
  READY_TO_SHIP
  SHIPPED
  COLLECTIONS
  KIT_COMPLETED
  RETURNED
}

enum AlertType {
  MBI_DUPLICATE
  COMPLIANCE_ISSUE
  DATA_QUALITY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AdvocateDisposition {
  DOESNT_QUALIFY
  COMPLIANCE_ISSUE
  PATIENT_DECLINED
  CALL_BACK
  CONNECTED_TO_COMPLIANCE
  CALL_DROPPED
  DUPE
}

enum CollectionsDisposition {
  NO_ANSWER
  SCHEDULED_CALLBACK
  KIT_COMPLETED
}

enum DoctorApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}

enum FileUploadType {
  DOCTOR_APPROVAL
  SHIPPING_REPORT
  KIT_RETURN
  MASTER_DATA
  BULK_LEAD
}
